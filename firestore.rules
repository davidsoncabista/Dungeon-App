rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- FUNÇÕES DE AJUDA ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // --- REGRAS PARA COLEÇÕES ---

    // USERS: Apenas o próprio usuário pode editar seu perfil. Admins podem editar qualquer perfil.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow update: if isSignedIn() && (isOwner(userId) || request.auth.token.admin == true);
      allow create, delete: if request.auth.token.admin == true; 
    }
    
    // ROOMS: Apenas admins e editores podem criar, editar ou deletar salas. Todos podem ler.
    match /rooms/{roomId} {
      allow read: if true;
      allow write: if request.auth.token.role == 'Administrador' || request.auth.token.role == 'Editor';
    }

    // BOOKINGS: Apenas usuários logados e ativos podem criar.
    // O organizador ou um admin pode editar/cancelar.
    // O participante pode se remover (sair) da reserva.
    match /bookings/{bookingId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.organizerId == request.auth.uid;
      allow update: if isSignedIn() && 
                    (resource.data.organizerId == request.auth.uid || 
                     request.auth.token.admin == true ||
                     !request.resource.data.participants.hasAll(resource.data.participants)); // Permite que um usuário se remova
      allow delete: if isSignedIn() && (resource.data.organizerId == request.auth.uid || request.auth.token.admin == true);
    }
    
    // NOTICES: Apenas admins podem criar/editar/deletar. Todos podem ler.
    match /notices/{noticeId} {
        allow read: if true;
        allow write: if request.auth.token.admin == true;
    }

    // USER MESSAGES: Apenas o destinatário pode ler. Apenas admins podem criar.
    match /userMessages/{messageId} {
        allow read, update(read): if resource.data.recipientId == request.auth.uid;
        allow create: if request.auth.token.admin == true;
        allow delete: if false; // Ninguém pode deletar mensagens.
    }
    
    // PLANS, SYSTEMSETTINGS: Apenas admins podem gerenciar. Todos os logados podem ler.
    match /plans/{planId} {
        allow read: if isSignedIn();
        allow write: if request.auth.token.admin == true;
    }
    match /systemSettings/{configId} {
        allow read: if isSignedIn();
        allow write: if request.auth.token.admin == true;
    }

    // TRANSACTIONS: O usuário pode ler suas próprias transações. Admins podem gerenciar todas.
    match /transactions/{transactionId} {
        allow read: if isOwner(resource.data.userId) || request.auth.token.admin == true;
        // A criação é feita via Cloud Function. Admin pode marcar como pago.
        allow create: if request.auth.token.admin == true; 
        allow update: if request.auth.token.admin == true;
        allow delete: if request.auth.token.admin == true;
    }

    // ACCESS RULES: Apenas admins podem ler e escrever.
    match /accessRules/{ruleId} {
        allow read, write: if request.auth.token.admin == true;
    }

    // POLLS (ENQUETES):
    match /polls/{pollId} {
      // Todos logados podem ler enquetes.
      allow read: if isSignedIn();
      // Admins podem criar, atualizar e deletar.
      allow write: if request.auth.token.admin == true;

      // VOTES (subcoleção):
      match /votes/{voteId} {
        // Apenas o próprio votante pode criar seu voto (garantido pela Cloud Function `castVote`).
        allow create: if isSignedIn() && isOwner(request.resource.data.userId);
        // Ninguém pode ler votos individuais para garantir anonimato, exceto talvez via backend.
        allow read: if false;
        // Ninguém pode atualizar ou deletar um voto.
        allow update, delete: if false;
      }
    }
  }
}
