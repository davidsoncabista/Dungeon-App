rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    // Verifica se o usuário tem a claim de 'admin' no seu token de autenticação.
    // Esta é a forma correta e performática de verificar permissões de administrador.
    function isAdmin() {
      return request.auth.token.admin == true;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // --- Regras para a Coleção de Usuários (`users`) ---
    match /users/{userId} {
      // LEITURA (LISTA): Administradores podem listar todos os usuários.
      allow list: if isAdmin();
      
      // LEITURA (GET): Um usuário pode ler seu próprio documento. Admins podem ler qualquer um.
      allow get: if isOwner(userId) || isAdmin();

      // ESCRITA (ATUALIZAR): Um usuário pode atualizar seu próprio perfil. Admins podem atualizar qualquer um.
      allow update: if isOwner(userId) || isAdmin();
      
      // ESCRITA (EXCLUIR): Apenas administradores podem excluir usuários.
      allow delete: if isAdmin();

      // A criação de documentos de usuário é feita pela Cloud Function.
    }

    // --- Regras para a Coleção de Salas (`rooms`) ---
    match /rooms/{roomId} {
      // Qualquer usuário logado pode ler as salas.
      allow read: if request.auth != null;
      
      // Apenas administradores podem escrever/editar salas.
      // (Simplificado para usar a mesma claim de admin)
      allow write: if isAdmin();
    }

    // --- Regras para a Coleção de Reservas (`bookings`) ---
    match /bookings/{bookingId} {
      // Qualquer usuário logado pode ler as reservas (para a agenda).
      allow read: if request.auth != null;
      
      // Um usuário pode criar uma reserva se for o organizador.
      allow create: if request.resource.data.organizerId == request.auth.uid;
      
      // O organizador ou um admin pode atualizar/excluir a reserva.
      allow update, delete: if resource.data.organizerId == request.auth.uid || isAdmin();
    }
  }
}
