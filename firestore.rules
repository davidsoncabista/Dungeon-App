
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helpers ---
    function isAuth() {
      return request.auth != null;
    }
    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    function isAdmin() {
      return isAuth() && request.auth.token.admin == true;
    }
    function isEditorOrAdmin() {
      return isAdmin() || (isAuth() && request.auth.token.role in ['Editor']);
    }
    function isRevisorOrAbove() {
        return isEditorOrAdmin() || (isAuth() && request.auth.token.role in ['Revisor']);
    }

    // --- Users ---
    match /users/{userId} {
      // Qualquer usuário autenticado pode criar seu próprio documento.
      allow create: if isAuth();

      // Apenas o próprio usuário ou um admin pode ler ou atualizar.
      allow read, update: if isUser(userId) || isEditorOrAdmin();

      // Apenas admins podem deletar (cuidado com esta regra em produção).
      allow delete: if isAdmin();
    }

    // --- Rooms, Plans (Admin-managed) ---
    match /rooms/{roomId} {
      allow read: if isAuth();
      allow create, update, delete: if isEditorOrAdmin();
    }
    match /plans/{planId} {
      allow read: if isAuth();
      allow create, update, delete: if isAdmin();
    }

    // --- Notices (Admin creates, all read) ---
     match /notices/{noticeId} {
      allow read: if isAuth();
      allow create, update, delete: if isAdmin();
    }

    // --- Bookings ---
    match /bookings/{bookingId} {
      allow read: if isAuth();

      // Qualquer usuário autenticado pode criar uma reserva.
      // Validações mais complexas (cotas, etc) são feitas no frontend e backend se necessário.
      allow create: if isAuth();

      // Regras de atualização complexas:
      allow update: if 
        // 1. O organizador ou um admin/editor pode editar livremente.
        (resource.data.organizerId == request.auth.uid || isEditorOrAdmin()) ||
        // 2. Um participante pode se remover da lista de participantes, mas não pode fazer mais nada.
        (
          request.auth.uid in resource.data.participants && // O usuário era um participante
          !(request.auth.uid in request.resource.data.participants) && // O usuário não é mais um participante
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants']) // Apenas o campo 'participants' foi alterado
        );
        
      // Apenas o organizador ou um admin pode cancelar (deletar) a reserva.
      allow delete: if isAuth() && (resource.data.organizerId == request.auth.uid || isAdmin());
    }
  }
}
