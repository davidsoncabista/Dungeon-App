
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getUserData() {
        // Retorna os dados do documento do usuário que está fazendo a requisição.
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function isAdmin() {
        // Verifica se o 'role' do usuário é 'Administrador'.
        return getUserData().role == 'Administrador';
    }
    
    function isEditor() {
        // Verifica se o 'role' é 'Editor' ou superior.
        return getUserData().role == 'Editor' || isAdmin();
    }
    
    function isRevisor() {
        // Verifica se o 'role' é 'Revisor' ou superior.
        return getUserData().role == 'Revisor' || isEditor();
    }

    // --- Access Rules ---
    match /accessRules/{ruleId} {
      // Qualquer usuário logado pode ler as regras.
      allow read: if isSignedIn();
      // Apenas Admins podem criar, editar ou deletar regras de acesso.
      allow write: if isAdmin();
    }

    // --- Users Collection ---
    match /users/{userId} {
      // Qualquer usuário logado pode ler perfis de outros usuários.
      allow read, list: if isSignedIn();
      // O próprio usuário ou um Admin pode atualizar um perfil.
      allow update: if isOwner(userId) || isAdmin();
      // Apenas Admins podem criar ou deletar usuários diretamente (criação principal via function).
      allow create, delete, get: if isAdmin();
    }
    
    // --- Rooms Collection ---
    match /rooms/{roomId} {
        // Qualquer usuário logado pode ver as salas.
        allow read: if isSignedIn();
        // Apenas Admins e Editores podem criar, editar ou deletar salas.
        allow write: if isEditor();
    }
    
    // --- Bookings Collection ---
    match /bookings/{bookingId} {
      // Usuário precisa estar logado para ler, criar, listar uma reserva.
      allow read, create, update, get, list: if isSignedIn();
      // Usuário pode deletar se for o organizador ou um Editor/Admin.
      allow delete: if isSignedIn();
    }

    // --- Notices Collection (Avisos) ---
    match /notices/{noticeId} {
        // Todos os usuários logados podem ler os avisos.
        allow read: if isSignedIn();
        // Apenas admins podem criar/editar/deletar avisos.
        allow write: if isAdmin();
    }

    // --- Plans & System Settings Collections ---
    match /plans/{planId} {
        // Todos os usuários logados podem ler os planos (necessário para a pág. de matrícula).
        allow read: if isSignedIn();
        // Apenas admins podem gerenciar os planos.
        allow write: if isAdmin();
    }
     match /systemSettings/{settingId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }

    // --- Transactions Collection ---
    match /transactions/{transactionId} {
        // Usuário só pode ver as próprias transações. Admin/Editor/Revisor podem ver todas.
        allow read: if isSignedIn() && (isOwner(resource.data.userId) || isRevisor());
        // Apenas Admins podem criar/atualizar transações (ex: cobrança manual).
        allow write: if isAdmin();
    }
    
    // --- User Messages (Mensagens Diretas) ---
    match /userMessages/{messageId} {
        // Usuário pode ler mensagens onde ele é o destinatário. Admin/Editor podem ler todas.
        allow read: if isSignedIn() && (isOwner(resource.data.recipientId) || isEditor());
        // Apenas Admins/Editores podem enviar (criar) mensagens.
        allow create: if isEditor();
        // O destinatário pode marcar como lida. Admins não podem deletar.
        allow update: if isOwner(resource.data.recipientId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
        allow delete: if false; // Mensagens não devem ser deletadas pelos usuários.
    }
    
    // --- Polls (Votações) ---
    match /polls/{pollId} {
        allow read: if isSignedIn();
        allow write: if isAdmin(); // Apenas Admins criam/gerenciam votações
        
        // Regra para a subcoleção de votos
        match /votes/{voteId} {
            // Apenas quem é elegível pode ler os votos (impede ver quem votou em quê, mas permite contagem via CF)
            allow read: if isSignedIn() && get(/databases/$(database)/documents/polls/$(pollId)).data.eligibleVoters.hasAny([request.auth.uid]);
            // Apenas o próprio usuário pode criar seu voto. Não pode editar/deletar.
            allow create: if isOwner(voteId);
            allow update, delete: if false;
        }
    }
    
    // --- Landing Page Blocks ---
    match /landingPageBlocks/{blockId} {
        // Leitura pública para que a landing page funcione para visitantes não logados.
        allow read: if true;
        // Apenas Admins e Editores podem gerenciar o conteúdo da landing page.
        allow write: if isEditor();
    }

    // --- Audit Logs ---
    match /auditLogs/{logId} {
        allow read: if isEditor();
        allow write: if false; // Logs são criados apenas pelo backend (Cloud Functions)
    }

    // --- Maze Game Sessions ---
    match /amazegame/{sessionId}/{document=**} {
        allow read, write: if isSignedIn(); // Qualquer usuário logado pode interagir com o Maze Tracker
    }

    // --- Biblioteca de Conteúdo ---
    match /books/{bookId} {
        // Leitura pública para todos os visitantes e usuários.
        allow read: if true;
        // Escrita restrita a Administradores e Editores.
        allow write: if isEditor();
    }
    
    // --- CONVITES DE CONVIDADOS (NOVO) ---
    match /guestInvitations/{invitationId} {
        allow read: if  isSignedIn();
        allow create: if  isSignedIn(); // A criação é feita via Cloud Function
        allow write, delete: if  isSignedIn(); // Não permitir alteração ou exclusão direta
    }
  }
}
