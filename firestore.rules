rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- REGRAS GERAIS ---
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return request.auth.token.admin == true || request.auth.token.role == 'Administrador';
    }
    
    function isEditorOrAdmin() {
       return isAdmin() || request.auth.token.role == 'Editor';
    }

    function isRevisorOrAbove() {
        return isEditorOrAdmin() || request.auth.token.role == 'Revisor';
    }

    // --- REGRAS ESPECÍFICAS ---

    // USERS: Apenas o próprio usuário ou um admin pode editar. 
    // Todos os logados podem ler.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isOwner(userId) || isAdmin();
    }

    // ROOMS & PLANS: Apenas admins e editores podem gerenciar.
    match /rooms/{roomId} {
        allow read: if isSignedIn();
        allow write: if isEditorOrAdmin();
    }
    match /plans/{planId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    match /systemSettings/config {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }

    // BOOKINGS: Usuário logado e ativo pode criar. Organizador ou admin pode editar/excluir.
    match /bookings/{bookingId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (resource.data.organizerId == request.auth.uid || isEditorOrAdmin());
      allow delete: if isSignedIn() && (resource.data.organizerId == request.auth.uid || isEditorOrAdmin());
    }
    
    // NOTICES: Apenas admins podem criar/editar/excluir. Todos podem ler.
    match /notices/{noticeId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    // TRANSACTIONS: Usuário pode ler suas próprias, admin pode ler todas. Admin pode criar/atualizar.
    match /transactions/{transactionId} {
        allow read: if isSignedIn() && (resource.data.userId == request.auth.uid || isAdmin());
        allow create, update: if isAdmin();
        allow delete: if none;
    }
    
    // USER MESSAGES: Apenas destinatário e admin podem ler. Apenas admin pode criar.
    match /userMessages/{messageId} {
        allow read: if isSignedIn() && (resource.data.recipientId == request.auth.uid || isAdmin());
        allow create: if isAdmin(); // Cloud Function fará a escrita
        allow update(message) {
          // Permite apenas que o destinatário marque a mensagem como lida
          return isSignedIn() &&
                 request.auth.uid == resource.data.recipientId &&
                 message.read == true &&
                 !('title' in request.resource.data) && // Impede alteração de outros campos
                 !('content' in request.resource.data);
        }
        allow delete: if none;
    }

    // POLLS (VOTAÇÕES): Apenas admins podem gerenciar.
    match /polls/{pollId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isAdmin();

        // VOTES (VOTOS): Apenas usuários elegíveis podem votar.
        match /votes/{voteId} {
            allow read: if isSignedIn();
            // 1. O usuário deve estar logado.
            // 2. A votação principal (parent) deve estar 'Aberta'.
            // 3. O ID do usuário deve estar na lista de 'eligibleVoters' da votação.
            // 4. O usuário não pode já ter votado (verifica se já existe um voto dele).
            allow create: if isSignedIn() &&
                           get(/databases/$(database)/documents/polls/$(pollId)).data.status == 'Aberta' &&
                           request.auth.uid in get(/databases/$(database)/documents/polls/$(pollId)).data.eligibleVoters &&
                           !exists(/databases/$(database)/documents/polls/$(pollId)/votes/$(request.auth.uid));
            allow update, delete: if none;
        }
    }
  }
}
