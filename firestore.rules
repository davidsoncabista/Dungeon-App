rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- FUNÇÕES AUXILIARES GLOBAIS ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function getRequestingUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    // --- FUNÇÕES DE VERIFICAÇÃO DE PAPEL (ROLE) ---
    function isAdmin() {
      return isSignedIn() && getRequestingUserData().role == 'Administrador';
    }

    function isEditorOrAdmin() {
      return isSignedIn() && getRequestingUserData().role in ['Administrador', 'Editor'];
    }

    function isRevisorOrHigher() {
      return isSignedIn() && getRequestingUserData().role in ['Administrador', 'Editor', 'Revisor'];
    }
    
    // --- FUNÇÃO-CHAVE DE ACESSO À APLICAÇÃO ---
    function canPerformActions() {
      let userData = getRequestingUserData();
      return isSignedIn() && userData.status == 'Ativo' && userData.category != 'Visitante';
    }

    // --- REGRAS POR COLEÇÃO ---

    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isOwner(userId) || isEditorOrAdmin();
      allow delete: if isAdmin();
    }

    match /rooms/{roomId} {
      allow read: if isSignedIn();
      allow create, update: if isEditorOrAdmin();
      allow delete: if isEditorOrAdmin();
    }

    match /bookings/{bookingId} {
      allow read: if isSignedIn(); // Simplificado para permitir que a lógica de app decida
      allow create: if isSignedIn() && canPerformActions() && isOwner(request.resource.data.organizerId);
      allow update(newData) {
        let isParticipantLeaving = request.auth.uid in resource.data.participants && !(request.auth.uid in newData.participants);
        return isSignedIn() && (
          (canPerformActions() && (isOwner(resource.data.organizerId) || isEditorOrAdmin())) ||
          (isParticipantLeaving)
        );
      }
      allow delete: if isSignedIn() && canPerformActions() && (isOwner(resource.data.organizerId) || isEditorOrAdmin());
    }

    match /userMessages/{messageId} {
        allow read: if isOwner(resource.data.recipientId) || isAdmin();
        allow list: if isAdmin(); // Admin pode listar todas
        allow create: if isAdmin(); // Apenas Admin pode enviar
        allow update: if isOwner(resource.data.recipientId); // Usuário pode marcar como lida
        allow delete: if false; // Ninguém pode deletar
    }
    
    match /accessRules/{ruleId} {
      allow read: if isRevisorOrHigher();
      allow write: if isAdmin();
    }

    match /notices/{noticeId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    match /polls/{pollId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
      
      match /votes/{voteId} {
        allow create, read: if isOwner(voteId);
        allow list: if isAdmin();
        allow update, delete: if false;
      }
    }
    
    match /systemSettings/config {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    match /plans/{planId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    match /transactions/{transactionId} {
        allow read: if isOwner(resource.data.userId) || isRevisorOrHigher();
        allow write: if isAdmin();
    }

    match /landingPageBlocks/{blockId} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}
