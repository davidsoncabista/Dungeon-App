rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- Funções de Ajuda ---
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getUserData(userId) {
        return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function isAdmin() {
        return getUserData(request.auth.uid).role == 'Administrador';
    }
    
    function isEditor() {
        return getUserData(request.auth.uid).role == 'Editor';
    }

    function isRevisor() {
        return getUserData(request.auth.uid).role == 'Revisor';
    }

    function isAtLeastRevisor() {
        let userRole = getUserData(request.auth.uid).role;
        return userRole in ['Administrador', 'Editor', 'Revisor'];
    }

    // --- Coleções ---

    match /users/{userId} {
      allow read: if isSignedIn();
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin() || isEditor());
      allow delete: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
    }
    
    match /rooms/{roomId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isSignedIn() && (isAdmin() || isEditor());
    }
    
    match /bookings/{bookingId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (isAdmin() || isEditor() || request.auth.uid == resource.data.organizerId);
      allow delete: if isSignedIn() && (isAdmin() || isEditor() || request.auth.uid == resource.data.organizerId);
    }
    
    match /plans/{planId} {
        allow read: if true;
        allow write: if isSignedIn() && isAdmin();
    }

    match /systemSettings/config {
        allow read: if true;
        allow write: if isSignedIn() && isAdmin();
    }
    
    match /notices/{noticeId} {
        allow read: if true;
        allow create, update, delete: if isSignedIn() && isAdmin();
    }

    match /transactions/{transactionId} {
        allow read: if isSignedIn() && (isAdmin() || isOwner(resource.data.userId));
        allow create, update: if isSignedIn() && isAdmin();
    }
    
    match /userMessages/{messageId} {
        allow read: if isSignedIn() && (isOwner(resource.data.recipientId) || isAtLeastRevisor());
        // A criação é feita via Cloud Function (sendUserMessage)
        allow create: if false; 
        allow update: if isSignedIn() && isOwner(resource.data.recipientId);
        allow delete: if false;
    }
    
    match /polls/{pollId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && isAdmin();
    }

    match /polls/{pollId}/votes/{voteId} {
        // A votação é feita via Cloud Function (castVote)
        allow read: if isSignedIn() && isAtLeastRevisor();
        allow write: if false; 
    }
    
    match /landingPageBlocks/{blockId} {
        allow read: if true; // Conteúdo público
        allow write: if isSignedIn() && (isAdmin() || isEditor());
    }

    match /accessRules/{ruleId} {
      allow read: if isSignedIn() && isAtLeastRevisor();
      allow create, update, delete: if isSignedIn() && isAdmin();
    }
    
    match /auditLogs/{logId} {
      allow create: if isSignedIn();
      allow read: if isSignedIn() && isAtLeastRevisor();
      allow update, delete: if false;
    }

  }
}
