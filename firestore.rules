rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- FUNÇÕES AUXILIARES GLOBAIS ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function getRequestingUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    // --- FUNÇÕES DE VERIFICAÇÃO DE PAPEL (ROLE) ---
    function isAdmin() {
      return isSignedIn() && getRequestingUserData().role == 'Administrador';
    }

    function isEditorOrAdmin() {
      return isSignedIn() && getRequestingUserData().role in ['Administrador', 'Editor'];
    }

    function isRevisorOrHigher() {
      return isSignedIn() && getRequestingUserData().role in ['Administrador', 'Editor', 'Revisor'];
    }
    
    // --- FUNÇÃO-CHAVE DE ACESSO À APLICAÇÃO ---
    function canPerformActions() {
      let userData = getRequestingUserData();
      return isSignedIn() && userData.status == 'Ativo' && userData.category != 'Visitante';
    }

    // --- REGRAS POR COLEÇÃO ---

    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && (isOwner(userId) || isEditorOrAdmin());
      allow delete: if isSignedIn() && isAdmin();
    }

    match /rooms/{roomId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && isEditorOrAdmin();
    }

    match /bookings/{bookingId} {
      allow read: if isSignedIn() && (isRevisorOrHigher() || request.auth.uid == resource.data.organizerId || request.auth.uid in resource.data.participants || request.auth.uid in resource.data.guests);
      allow create: if isSignedIn() && canPerformActions() && isOwner(request.resource.data.organizerId);
      allow update: if isSignedIn() && canPerformActions() && (isOwner(resource.data.organizerId) || isEditorOrAdmin() || (isOwner(request.auth.uid) && request.auth.uid in resource.data.participants));
      allow delete: if isSignedIn() && canPerformActions() && (isOwner(resource.data.organizerId) || isEditorOrAdmin());
    }

    match /userMessages/{messageId} {
        allow read: if isSignedIn() && isOwner(resource.data.recipientId);
        allow write: if isSignedIn() && (isAdmin() || (isOwner(resource.data.recipientId) && request.resource.data.read == true));
        allow list: if isSignedIn() && isAdmin();
    }

    match /accessRules/{ruleId} {
      allow read, write: if isSignedIn() && isAdmin();
    }
    
    match /landingPageBlocks/{blockId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /notices/{noticeId} {
      allow read: if true;
      allow create, delete: if isAdmin();
      allow update: if isAdmin() || (isSignedIn() && request.resource.data.keys().hasOnly(['readBy']));
    }
    
    match /polls/{pollId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
      
      match /votes/{voteId} {
        allow create, read: if isOwner(voteId);
        allow list: if isAdmin();
        allow update, delete: if false;
      }
    }
    
    match /systemSettings/config {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    match /plans/{planId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    match /transactions/{transactionId} {
        allow read: if isOwner(resource.data.userId) || isAdmin();
        allow write: if isAdmin();
    }
  }
}