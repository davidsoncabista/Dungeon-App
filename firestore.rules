rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Funções de Ajuda (Helpers) ---
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    // Função para ler o documento do usuário autenticado
    function getUserData(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }
    // Função isAdmin corrigida: agora lê o 'role' diretamente do documento do usuário no Firestore.
    function isAdmin() {
      return isSignedIn() && getUserData(request.auth.uid).role == 'Administrador';
    }
    function isEditorOrAdmin() {
      return isSignedIn() && getUserData(request.auth.uid).role in ['Administrador', 'Editor'];
    }
    function isRevisorOrHigher() {
      return isSignedIn() && getUserData(request.auth.uid).role in ['Administrador', 'Editor', 'Revisor'];
    }

    // --- Regras por Coleção ---

    // REGRAS DE ACESSO (Permissões customizadas)
    // Apenas administradores podem ler e escrever as definições de papéis.
    match /accessRules/{ruleId} {
      allow read, write: if isAdmin();
    }

    // USUÁRIOS
    match /users/{userId} {
      // Leitura de um único documento (get): O próprio usuário ou um Revisor (ou superior) pode ler.
      allow get: if isOwner(userId) || isRevisorOrHigher();
      
      // Leitura de múltiplos documentos (list/query): Apenas Revisor (ou superior) pode fazer.
      allow list: if isRevisorOrHigher();
      
      // Atualização: O próprio usuário ou um Admin/Editor pode atualizar um perfil.
      allow update: if isOwner(userId) || isEditorOrAdmin();

      // Criação: A criação de documentos de usuário é controlada pela Cloud Function 'createUserDocument'.
      // Esta regra permite que a função (que bypassa regras) crie o documento.
      allow create: if true;

      // Exclusão: Apenas administradores podem excluir usuários.
      allow delete: if isAdmin();
    }

    // SALAS
    match /rooms/{roomId} {
      allow read: if isSignedIn();
      allow write: if isEditorOrAdmin();
    }

    // RESERVAS
    match /bookings/{bookingId} {
      allow read: if isSignedIn();
      // Verificação de status 'Ativo' agora usa a função getUserData()
      allow create: if isSignedIn() && getUserData(request.auth.uid).status == 'Ativo' && isOwner(request.resource.data.organizerId);
      allow update: if (isOwner(resource.data.organizerId) || isEditorOrAdmin()) || (isOwner(request.auth.uid) && request.auth.uid in resource.data.participants);
      allow delete: if isOwner(resource.data.organizerId) || isEditorOrAdmin();
    }
    
    // AVISOS
    match /notices/{noticeId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // MENSAGENS DIRETAS
    match /userMessages/{messageId} {
        allow read: if isOwner(resource.data.recipientId) || isAdmin();
        allow update: if isOwner(resource.data.recipientId);
        allow create, delete: if isAdmin();
    }
    
    // VOTAÇÕES
    match /polls/{pollId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();

        match /votes/{voteId} {
            allow create, read: if isOwner(voteId);
            allow list: if isAdmin();
            allow update, delete: if false;
        }
    }
    
    // CONFIGURAÇÕES DO SISTEMA E PLANOS
    match /systemSettings/config {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    match /plans/{planId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    // TRANSAÇÕES FINANCEIRAS
    match /transactions/{transactionId} {
        allow read: if isOwner(resource.data.userId) || isAdmin();
        allow write: if isAdmin();
    }
  }
}