rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- REGRAS GERAIS ---
    // A coleção 'users' armazena perfis públicos e dados de associação.
    match /users/{userId} {
      // CORRETO: Qualquer usuário autenticado pode ler os perfis de outros usuários.
      // Essencial para o app funcionar.
      allow read: if request.auth != null;
      
      // O próprio usuário pode atualizar seu perfil.
      // Admins e Editores também podem atualizar perfis de outros usuários.
      allow update: if request.auth.uid == userId || request.auth.token.role in ['Administrador', 'Editor'];
      
      // Apenas admins podem criar ou deletar usuários (casos raros).
      allow create, delete: if request.auth.token.role == 'Administrador';
    }

    // A coleção 'rooms' é pública para leitura.
    match /rooms/{roomId} {
      allow read: if true;
      // Apenas Admins e Editores podem modificar as salas.
      allow write: if request.auth.token.role in ['Administrador', 'Editor'];
    }

    // A coleção 'bookings' contém as reservas.
    match /bookings/{bookingId} {
      // CORRETO: Qualquer usuário autenticado pode ler os detalhes de uma reserva.
      allow read: if request.auth != null;

      // A criação é permitida se o usuário for o organizador da reserva.
      allow create: if request.auth.uid == request.resource.data.organizerId;

      // A atualização é permitida para o organizador ou para admins/editores.
      allow update: if request.auth.uid == resource.data.organizerId || request.auth.token.role in ['Administrador', 'Editor'];
      
      // A exclusão é permitida para o organizador ou para admins.
      allow delete: if request.auth.uid == resource.data.organizerId || request.auth.token.role == 'Administrador';
    }
    
    // A coleção 'plans' é configurada pelo admin.
    match /plans/{planId} {
      // CORRETO: Qualquer um pode ler os planos disponíveis.
      allow read: if true;
      // Apenas admins podem criar, editar ou deletar planos.
      allow write: if request.auth.token.role == 'Administrador';
    }
    
    // A coleção 'systemSettings' contém configurações globais.
    match /systemSettings/{docId} {
      allow read: if true; // Todos podem ler (ex: valor da joia).
      allow write: if request.auth.token.role == 'Administrador';
    }

    // Coleção de 'notices' (avisos).
    match /notices/{noticeId} {
        // CORRETO: A leitura pública ("if true") já permite que qualquer usuário, logado ou não, veja os avisos.
        // Isso já atende ao requisito do AppLayout.
        allow read: if true;
        allow write: if request.auth.token.role == 'Administrador'; // Apenas admins podem criar/editar/deletar
    }
    
      // Coleção de 'transactions' (transações financeiras).
    match /transactions/{transactionId} {
      // O usuário pode ler suas próprias transações. Admins podem ler todas.
      allow read: if request.auth.uid == resource.data.userId || request.auth.token.role == 'Administrador';
      // Apenas Cloud Functions (backend) ou Admins podem criar/atualizar.
      // A exclusão não é permitida para manter o histórico.
      allow create, update: if request.auth.token.role == 'Administrador';
      allow delete: if false;
    }
    
    // --- REGRAS PARA MENSAGENS PRIVADAS (CORRIGIDO) ---
    match /userMessages/{messageId} {
      // CORREÇÃO CRÍTICA: Permite a leitura apenas se o usuário for o destinatário OU o remetente.
      // Isso conserta a falha de segurança (onde todos liam tudo) e permite que a consulta
      // do AppLayout para mensagens não lidas funcione corretamente.
      // Moderadores também podem ler.
      allow read: if request.auth != null && 
                   (request.auth.uid == resource.data.recipientId || 
                    request.auth.uid == resource.data.senderId ||
                    request.auth.token.role in ['Administrador', 'Editor', 'Revisor']);

      // A criação de mensagens é controlada pela Cloud Function 'sendUserMessage', 
      // então bloqueamos a criação direta para segurança.
      allow create: if false;

      // Apenas moderadores podem editar ou apagar uma mensagem. O usuário pode atualizar (marcar como lida).
      allow update: if request.auth != null && 
                     (request.auth.uid == resource.data.recipientId || 
                      request.auth.token.role in ['Editor', 'Administrador']);
      allow delete: if request.auth.token.role in ['Editor', 'Administrador'];
    }

    // Coleção para 'landingPageBlocks', o conteúdo da landing page.
    match /landingPageBlocks/{blockId} {
      allow read: if true; // O conteúdo é público.
      allow write: if request.auth.token.role in ['Administrador', 'Editor']; // Apenas admins e editores podem gerenciar.
    }
    
    // Coleções de Votação
    match /polls/{pollId} {
      // CORRETO: Qualquer usuário logado pode ler os dados de uma votação,
      // o que é necessário para o AppLayout verificar se há votações ativas.
      allow read: if request.auth != null;
      allow write: if request.auth.token.role == 'Administrador'; // Apenas admins podem criar/gerenciar votações.
      
      match /votes/{voteId} {
        // Apenas admins podem ler todos os votos para apuração. O usuário pode ler o próprio voto.
        allow read: if request.auth.token.role == 'Administrador' || request.auth.uid == voteId;
        
        // Ninguém pode atualizar ou deletar um voto.
        allow update, delete: if false;
        
        // Apenas um usuário autenticado pode criar um voto para si mesmo.
        allow create: if request.auth.uid == voteId;
      }
    }
    
    // Coleção para 'accessRules'.
    match /accessRules/{ruleId} {
      // CORRETO: Qualquer usuário logado pode ler, atendendo ao requisito do AppLayout.
      allow read: if request.auth != null;
      allow write: if request.auth.token.role == 'Administrador'; // Apenas Admins podem gerenciar.
    }
    
   // --- Funções de Ajuda (para a coleção auditLogs) ---
    function isSignedIn() {
      return request.auth != null;
    }
    
    function getUserData(userId) {
        return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function isAtLeastRevisor() {
        let userRole = getUserData(request.auth.uid).role;
        return isSignedIn() && userRole in ['Administrador', 'Editor', 'Revisor'];
    }
    
    // Coleção 'auditLogs' usando a lógica da "regra nova".
    match /auditLogs/{logId} {
      allow create: if isSignedIn();
      allow read: if isAtLeastRevisor();
      allow update, delete: if false;
    }

  } // <-- Fecha o 'match /databases'
} // <-- Fecha o 'service cloud.firestore'
