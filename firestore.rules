rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- FUNÇÕES DE HELPER COM CUSTOM CLAIMS ---
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // As funções de papel usam agora o Custom Claim 'role'
    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true;
    }
    
    function isEditorOrHigher() {
      return isSignedIn() && (request.auth.token.role in ['Administrador', 'Editor']);
    }

    function isRevisorOrHigher() {
      return isSignedIn() && (request.auth.token.role in ['Administrador', 'Editor', 'Revisor']);
    }

    function isMember() {
      // Verifica se o usuário tem um 'role' e não é apenas um 'Visitante' ou sem papel.
      return isSignedIn() && request.auth.token.role != null && request.auth.token.role != 'Visitante';
    }
    
    // --- REGRAS DAS COLEÇÕES ---

    // USERS: 
    // Separa a leitura de um único documento e a listagem.
    match /users/{userId} {
      allow get: if isOwner(userId) || isRevisorOrHigher();
      allow list: if isRevisorOrHigher();
      allow update: if isOwner(userId) || isEditorOrHigher();
      allow create: if isAdmin(); // Apenas admins podem criar perfis (via Cloud Function recomendada).
      allow delete: if isAdmin();
    }

    // ROOMS:
    match /rooms/{roomId} {
      allow read: if isSignedIn();
      allow write: if isEditorOrHigher();
    }
    
    // PLANS & SYSTEM SETTINGS:
    match /plans/{planId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    match /systemSettings/{docId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // NOTICES:
    match /notices/{noticeId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // BOOKINGS:
    match /bookings/{bookingId} {
      // Leitura: O participante, o organizador ou um Revisor (ou superior) pode ler.
      allow read: if request.auth.uid in resource.data.participants || isOwner(resource.data.organizerId) || isRevisorOrHigher();
      // Criação: Um membro pode criar se for o organizador.
      allow create: if isMember() && isOwner(request.resource.data.organizerId);
      // Atualização: Organizador ou cargo superior pode atualizar.
      // Participantes podem se remover, verificando se a lista diminuiu.
      allow update: if (isOwner(resource.data.organizerId) || isEditorOrHigher()) 
                    || (request.auth.uid in resource.data.participants && !(request.auth.uid in request.resource.data.participants));
      // Exclusão: Organizador ou cargo superior.
      allow delete: if isOwner(resource.data.organizerId) || isEditorOrHigher();
    }
    
    // TRANSACTIONS:
    match /transactions/{transactionId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow write: if isAdmin();
    }

    // USER MESSAGES:
    match /userMessages/{messageId} {
      allow read, update: if isOwner(resource.data.recipientId);
      allow create, delete: if isAdmin();
    }

    // POLLS (VOTAÇÕES):
    match /polls/{pollId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
      
      match /votes/{voteId} {
        allow read: if isAdmin(); // Apenas admins podem ler todos os votos para garantir anonimato.
        allow create: if isOwner(voteId);
        allow write: if false; // Votos não podem ser alterados ou excluídos.
      }
    }
    
    // ACCESS RULES (Regras de Acesso)
    match /accessRules/{ruleId} {
        allow read, write: if isAdmin();
    }
  }
}
