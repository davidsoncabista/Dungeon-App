rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Funções de Ajuda (Helpers) ---
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    function getUserData(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }
    function isAdmin() {
      // Verifica o Custom Claim 'admin' (booleano) no token de autenticação.
      return isSignedIn() && request.auth.token.admin == true;
    }
    function isEditorOrAdmin() {
      return isSignedIn() && (request.auth.token.role == 'Editor' || request.auth.token.admin == true);
    }
    function isRevisorOrHigher() {
      return isSignedIn() && (request.auth.token.role in ['Revisor', 'Editor'] || request.auth.token.admin == true);
    }

    // --- Regras por Coleção ---

    // REGRAS DE ACESSO (Permissões customizadas)
    match /accessRules/{ruleId} {
      allow read, write: if isAdmin();
    }

    // USUÁRIOS
    match /users/{userId} {
      allow get: if isOwner(userId) || isRevisorOrHigher();
      allow list: if isRevisorOrHigher();
      allow update: if isOwner(userId) || isEditorOrAdmin();
      allow create: if true; // Controlado pela Cloud Function 'createUserDocument'
      allow delete: if isAdmin();
    }

    // SALAS
    match /rooms/{roomId} {
      allow read: if isSignedIn();
      allow write: if isEditorOrAdmin();
    }

    // RESERVAS
    match /bookings/{bookingId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && getUserData(request.auth.uid).status == 'Ativo' && isOwner(request.resource.data.organizerId);
      allow update: if (isOwner(resource.data.organizerId) || isEditorOrAdmin()) || (isOwner(request.auth.uid) && request.auth.uid in resource.data.participants);
      allow delete: if isOwner(resource.data.organizerId) || isEditorOrAdmin();
    }
    
    // AVISOS
    match /notices/{noticeId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // --- REGRAS PARA MENSAGENS DIRETAS DE USUÁRIOS ---
    match /userMessages/{messageId} {
      allow get: if isOwner(resource.data.recipientId) || isAdmin();
      allow list: if request.query.recipientId == request.auth.uid || isAdmin();
      
      // CREATE: Apenas administradores (via custom claim) podem criar novas mensagens.
      allow create: if isAdmin();

      // UPDATE: O destinatário pode apenas marcar a mensagem como lida.
      allow update: if isOwner(resource.data.recipientId)
                    && request.resource.data.read == true
                    && resource.data.read == false
                    && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);

      allow delete: if false;
    }
    
    // VOTAÇÕES
    match /polls/{pollId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();

        match /votes/{voteId} {
            allow create, read: if isOwner(voteId);
            allow list: if isAdmin();
            allow update, delete: if false;
        }
    }
    
    // CONFIGURAÇÕES DO SISTEMA E PLANOS
    match /systemSettings/config {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    match /plans/{planId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    // TRANSAÇÕES FINANCEIRAS
    match /transactions/{transactionId} {
        allow read: if isOwner(resource.data.userId) || isAdmin();
        allow write: if isAdmin(); // Admins podem criar cobranças avulsas
        allow create: if isAdmin();
    }
  }
}
