
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- REGRAS GERAIS ---
    // A coleção 'users' armazena perfis públicos e dados de associação.
    match /users/{userId} {
      // Qualquer usuário autenticado pode ler os perfis de outros usuários.
      allow read: if request.auth != null;
      
      // O próprio usuário pode atualizar seu perfil.
      // Admins e Editores também podem atualizar perfis de outros usuários.
      allow update: if request.auth.uid == userId || request.auth.token.role in ['Administrador', 'Editor'];
      
      // Apenas admins podem criar ou deletar usuários (casos raros).
      allow create, delete: if request.auth.token.role == 'Administrador';
    }

    // A coleção 'rooms' é pública para leitura.
    match /rooms/{roomId} {
      allow read: if true;
      // Apenas Admins e Editores podem modificar as salas.
      allow write: if request.auth.token.role in ['Administrador', 'Editor'];
    }

    // A coleção 'bookings' contém as reservas.
    match /bookings/{bookingId} {
      // Qualquer usuário autenticado pode ler os detalhes de uma reserva.
      allow read: if request.auth != null;

      // A criação é permitida se o usuário for o organizador da reserva.
      allow create: if request.auth.uid == request.resource.data.organizerId;

      // A atualização é permitida para o organizador ou para admins/editores.
      allow update: if request.auth.uid == resource.data.organizerId || request.auth.token.role in ['Administrador', 'Editor'];
      
      // A exclusão é permitida para o organizador ou para admins.
      allow delete: if request.auth.uid == resource.data.organizerId || request.auth.token.role == 'Administrador';
    }
    
    // A coleção 'plans' é configurada pelo admin.
    match /plans/{planId} {
      // Qualquer um pode ler os planos disponíveis.
      allow read: if true;
      // Apenas admins podem criar, editar ou deletar planos.
      allow write: if request.auth.token.role == 'Administrador';
    }
    
    // A coleção 'systemSettings' contém configurações globais.
    match /systemSettings/{docId} {
      allow read: if true; // Todos podem ler (ex: valor da joia).
      allow write: if request.auth.token.role == 'Administrador';
    }

    // Coleção de 'notices' (avisos).
    match /notices/{noticeId} {
      // Leitura pública para que qualquer usuário veja os avisos.
      allow read: if true;
      allow write: if request.auth.token.role == 'Administrador';
    }
    
    // Coleção de 'transactions' (transações financeiras).
    match /transactions/{transactionId} {
      // O usuário pode ler suas próprias transações. Admins podem ler todas.
      allow read: if request.auth.uid == resource.data.userId || request.auth.token.role == 'Administrador';
      // Apenas Cloud Functions (backend) ou Admins podem criar/atualizar.
      allow create, update: if request.auth.token.role == 'Administrador';
      allow delete: if false; // Não permitir exclusão para manter histórico.
    }
    
    // --- REGRAS PARA MENSAGENS PRIVADAS ---
    match /userMessages/{messageId} {
      // Leitura permitida para destinatário, remetente, ou moderadores.
      allow read: if request.auth != null && 
                      (request.auth.uid == resource.data.recipientId || 
                       request.auth.uid == resource.data.senderId ||
                       request.auth.token.role in ['Administrador', 'Editor', 'Revisor']);

      // A criação é controlada pela Cloud Function 'sendUserMessage'.
      allow create: if false;

      // O destinatário pode marcar como lida. Admins/Editores podem editar.
      allow update: if request.auth != null && 
                        (request.auth.uid == resource.data.recipientId || 
                         request.auth.token.role in ['Editor', 'Administrador']);
      allow delete: if request.auth.token.role in ['Editor', 'Administrador'];
    }

    // Coleção para 'landingPageBlocks', o conteúdo da landing page.
    match /landingPageBlocks/{blockId} {
      allow read: if true; // O conteúdo é público.
      allow write: if request.auth.token.role in ['Administrador', 'Editor'];
    }
    
    // Coleções de Votação
    match /polls/{pollId} {
      allow read: if request.auth != null;
      allow write: if request.auth.token.role == 'Administrador';
      
      match /votes/{voteId} {
        allow read: if request.auth.token.role == 'Administrador' || request.auth.uid == voteId;
        allow update, delete: if false;
        allow create: if request.auth.uid == voteId;
      }
    }
    
    // Coleção para 'accessRules'.
    match /accessRules/{ruleId} {
      allow read: if request.auth != null;
      allow write: if request.auth.token.role == 'Administrador';
    }
    
    // Coleção 'auditLogs'.
    match /auditLogs/{logId} {
      allow create: if request.auth != null; // Qualquer usuário logado pode criar um log (ex: login).
      allow read: if request.auth != null && request.auth.token.role in ['Administrador', 'Editor'];
      allow update, delete: if false;
    }

    // --- REGRAS PARA O MAZE TRACKER ---
    // A coleção 'amazegame' armazena as sessões do rastreador de iniciativa.
    match /amazegame/{sessionId} {
      // Qualquer um pode ler e escrever em qualquer documento da sessão.
      // Isso permite a colaboração em tempo real sem necessidade de login.
      allow read, write: if true;

      // A subcoleção 'logs' armazena o histórico da sessão.
      match /logs/{logId} {
        allow read, write: if true;
      }

      // A subcoleção 'actors' contém os personagens e monstros de uma sessão.
      match /actors/{actorId} {
        allow read, write: if true;
      }
    }
  }
}
